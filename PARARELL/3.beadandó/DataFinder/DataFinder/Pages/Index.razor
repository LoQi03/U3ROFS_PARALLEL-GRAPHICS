@page "/"
@using DataFinder.Extensions;
@using DataFinder.Model;

<PageTitle>Data Finder</PageTitle>
<div>
    <div>
        <h3>Search</h3>
        <div>
            <input type="text" class="form-control" id="text" aria-describedby="text" placeholder="Some text" @bind="searchText">
            <button type="button" class="btn btn-primary my-2" @onclick="Search">Search</button>
            @if(SearchedDatas is not null)
            {
                <button type="button" class="btn btn-danger mx-2" @onclick="Reset">Reset</button>
            }
        </div>
        
    </div>
   <table class="table">
  <thead>
    <tr>
        <th style="cursor: pointer;" scope="col" @onclick="SortById">Id</th>
        <th style="cursor: pointer;" scope="col" @onclick="SortByAge">Age</th>
        <th style="cursor: pointer;" scope="col" @onclick="SortByName">Name</th>
        <th style="cursor: pointer;" scope="col" @onclick="SortByEmail">Email</th>
        <th style="cursor: pointer;" scope="col" @onclick="SortByCity">City</th>
    </tr>
  </thead>
  <tbody>
            @if (SearchedDatas is null)
            {
                @foreach (var item in DataList)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Age</td>
                        <td>@item.Name</td>
                        <td>@item.Email</td>
                        <td>@item.City</td>
                    </tr>
                }
            }
            else
            {
                @foreach (var item in SearchedDatas)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Age</td>
                        <td>@item.Name</td>
                        <td>@item.Email</td>
                        <td>@item.City</td>
                    </tr>
                }
            }
   </tbody>
    </table>
</div>
@code{
    private string searchText = "";
    private List<DataModel>? SearchedDatas = null;
    private static Random _random = new Random();
    private static string GetCity()
    {
        int city = _random.Next(2);

        if (city % 2 == 0)
            return "Miskolc";
        else
            return "Budapest";
    }
    private List<DataModel> DataList = Enumerable.Range(0, 1000).Select(x => new DataModel
            {
                Age = _random.Next(1, 100),
                Name = Guid.NewGuid().ToString().Split('-').First(),
                City = GetCity(),
                Id = Guid.NewGuid(),
                Email = Guid.NewGuid().ToString().Split('-').First()+"@example.com"
            }).ToList();

    private async void SortById()
    {
        if(SearchedDatas is null)
        DataList = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(DataList, "Id"); });
        else
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(SearchedDatas, "Id"); });
        StateHasChanged();
    }
    private async void SortByAge()
    {
        if(SearchedDatas is null)
        DataList = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(DataList, "Age"); });
        else
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(SearchedDatas, "Age"); });
        StateHasChanged();
    }
    private async void SortByName()
    {
        if(SearchedDatas is null)
        DataList = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(DataList, "Name"); });
        else
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(SearchedDatas, "Name"); });
        StateHasChanged();
    }
    private async void SortByEmail()
    {
        if(SearchedDatas is null)
        DataList = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(DataList, "Email"); });
        else
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(SearchedDatas, "Email"); });
        StateHasChanged();
    }
    private async void SortByCity()
    {
        if(SearchedDatas is null)
        DataList = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(DataList, "City"); });
        else
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSort(SearchedDatas, "City"); });
        StateHasChanged();
    }
    private async void Search()
    {
        SearchedDatas = await Task.Run(() => { return DataHandleExtension.MultiThreadedSearch(DataList, searchText); });
        StateHasChanged();
    }
    private void Reset()
    {
        SearchedDatas = null;
        StateHasChanged();
    }
}